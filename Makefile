# get the normalized current directory
THIS_DIR := $(shell pwd)

# Default to a Debug build. If you want to enable debugging flags, run
# "make BUILD_TYPE=Release"
BUILD_TYPE ?= Debug
ifneq "$(BUILD_TYPE)" "Debug"
    ifneq "$(BUILD_TYPE)" "Release"
        $(error Bad BUILD_TYPE value "$(BUILD_TYPE)" please use "Debug" or "Release")
    endif
endif
BUILD_TYPE_LOWER := $(shell echo $(BUILD_TYPE) | tr A-Z a-z)


# Figure out where to build the software. Use BUILD_PREFIX if it was passed in.
BUILD_PREFIX ?= $(THIS_DIR)/build/$(BUILD_TYPE_LOWER)


BUILD_TOOL ?= ninja
ifneq "$(BUILD_TOOL)" "ninja"
    ifneq "$(BUILD_TOOL)" "make"
        $(error Bad BUILD_TOOL value "$(BUILD_TOOL)" please use "ninaj" or "make")
    endif
endif

CMAKE_GENERATOR ?= Ninja
BUILD_FILE ?= build.ninja
ifeq "$(BUILD_TOOL)" "make"
    BUILD_FILE ?= Makefile
    CMAKE_GENERATOR ?= "Unix Makefiles"
endif

# Get number of jobs Make is being called with. This only works with '-j' and not --jobs'
MAKE_PID := $(shell echo $$PPID)
JOB_FLAG := $(filter -j%, $(subst -j ,-j,$(shell ps T | grep "^\s*$(MAKE_PID).*make")))

INSTALL_PREFIX ?= $(shell echo $(THIS_DIR)/build/$(BUILD_TYPE_LOWER)/install )

# Default to a Debug build. If you want to enable debugging flags, run
# "make BUILD_TYPE=Release"
CLANG_TIDY_FIX ?= OFF
ifneq "$(CLANG_TIDY_FIX)" "ON"
    ifneq "$(CLANG_TIDY_FIX)" "OFF"
        $(error Bad CLANG_TIDY_FIX value "$(CLANG_TIDY_FIX)" please use "ON" or "OFF")
    endif
endif

ifeq "$(CMAKE_OPTIONS)" ""
    CMAKE_OPTIONS := -G $(CMAKE_GENERATOR) -DCLANG_TIDY_FIX=$(CLANG_TIDY_FIX) -DCMAKE_INSTALL_PREFIX=$(INSTALL_PREFIX) -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
else
   # force cmake to be re-run if we change the cmake options
   $(shell rm $(BUILD_PREFIX)/$(BUILD_FILE))
endif


.PHONY: h
h:
	@echo 'make [OPTIONS...] [TARGETS...]'
	@echo
	@echo 'TARGETS:'
	@echo
	@echo '<any>'
	@echo '    Any targets generated by CMake, e.g. all, test'
	@echo
	@echo 'cmd a="<shell command>"'
	@echo '    Runs a abitrary shell command in the build directory specified'
	@echo '    by the BUILD_TYPE.'
	@echo '    e.g.'
	@echo '    $$make cmd a="ctest -R target.test"'
	@echo
	@echo
	@echo 'OPTIONS:'
	@echo
	@echo 'BUILD_TYPE=<Debug|Release>'
	@echo '    specifies the CMake build type, and the build subdirectory'
	@echo '    default: Debug'
	@echo
	@echo 'BUILD_TOOL=<ninja|make>'
	@echo '    Specifies the cmake generator'
	@echo '    default: ninja'
	@echo
	@echo 'CLANG_TIDY_FIX=<ON|OFF>'
	@echo '    Specifies if clang-tidy should run fixits or not'
	@echo '    default: OFF'
	@echo
	@echo 'INSTALL_PREFIX=<path>'
	@echo '    Specifies the CMAKE_INSTALL_PREFIX CMake variable value'
	@echo '    default when BUILD_TYPE is Debug: ./build/debug/install'
	@echo '    default when BUILD_TYPE is Release: ./build/release/install'
	@echo
	@echo '-j <jobs>'
	@echo '    <jobs> pass -j flag to underlying BUILD_TOOL to set the job number'
	@echo '    default: '''
	@echo
	@echo 'EXAMPLES:'
	@echo
	@echo 'make BUILD_TYPE=Release all -j8'
	@echo 'make target'

$(BUILD_PREFIX)/$(BUILD_FILE):
	# create the temporary build directory if needed
	mkdir -p $(BUILD_PREFIX)
	touch -c $@
	# run CMake to generate and configure the build scripts
	ln -sf $(BUILD_PREFIX)/compile_commands.json compile_commands.json && \
	cd $(BUILD_PREFIX) && \
	cmake ../.. $(CMAKE_OPTIONS); \

# Other (custom) targets are passed through to the cmake-generated $(BUILD_FILE)
# Note: when no targets are passed from the commanding the special variable $@
# is "Makefile" so we need to angle this odd case differently.
%: $(BUILD_PREFIX)/$(BUILD_FILE)
	@set -o xtrace; \
	export CTEST_OUTPUT_ON_FAILURE=1; \
	cmake --build $(BUILD_PREFIX) $(JOB_FLAG) -t $@ -- ${a}; \

cmd: $(BUILD_PREFIX)/$(BUILD_FILE)
	export CTEST_OUTPUT_ON_FAILURE=1; \
	cd $(BUILD_PREFIX); \
	${a};


# All the Makefiles read themselves get matched if a target exists for them, so
# they will get matched by a Match anything target %:. This target is here
# to prevent the %: Match-anything target from matching, and do nothing.
Makefile:
	;
